{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,kBAClCC,EAAUF,SAASC,cAAc,iBACjCE,EAAYH,SAASC,cAAc,mBACzBD,SAASC,cAAc,UAC7BG,iBAAiB,SAG3B,WAEE,GADAC,MAAMC,iBACgB,KAAnBP,EAAWQ,OAA8B,KAAlBL,EAAUK,OAAgC,KAApBJ,EAAYI,MAG1C,YADhBC,EAAAX,GAASY,OAAOC,QAAQ,sBAG1B,GAAGC,OAAOZ,EAAWQ,OAAO,GAAGI,OAAOT,EAAUK,OAAO,GAAGI,OAAOR,EAAYI,QAAQ,EAG7D,YADtBC,EAAAX,GAASY,OAAOC,QAAQ,4BAG1B,IAAIE,EAAMD,OAAOZ,EAAWQ,OAC5B,KAAMM,EAAQF,OAAOR,EAAYI,QACjC,CAEE,IAAMO,EAAWC,EADjBF,GAAS,EAC8BD,GACvCI,QAAQC,IAAIH,GACZA,EAAWI,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAC3Bb,EAAAX,GAASY,OAAOa,QAAQ,uBAAwCC,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,IAEvEG,OAAM,SAAAL,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBb,EAAAX,GAASY,OAAOC,QAAQ,sBAAqCa,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,IAErET,GAAOD,OAAOT,EAAUK,M,CAE1BM,EAAQ,C,IA5BV,IAAIA,EAAQ,EA8BZ,SAASE,EAAcK,EAAUC,GAC/B,OAAO,IAAII,SAAQ,SAACC,EAAQC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WAENH,GAEDF,EAAQ,CAACN,WAASC,UAEpBM,EAAO,CAACP,WAASC,S,GACjBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayValue=document.querySelector('[name=\"delay\"]')\nconst stepValue=document.querySelector('[name=\"step\"]')\nconst amountValue=document.querySelector('[name=\"amount\"]')\nconst submitBtn=document.querySelector('button')\nsubmitBtn.addEventListener('click',onButtonClick)\nlet counter=0;\n\nfunction onButtonClick(){\n  event.preventDefault()\n  if(delayValue.value===''||stepValue.value===''||amountValue.value==='')\n  {\n    Notiflix.Notify.failure(\"Заповніть всі поля\")\n    return\n  }\n  if(Number(delayValue.value)<0||Number(stepValue.value)<0||Number(amountValue.value)<=0)\n  {\n    Notiflix.Notify.failure(\"Введіть додатні значення\")\n    return\n  }\n  let delay=Number(delayValue.value)\n  while(counter<Number(amountValue.value))\n  {\n    counter+=1;\n    const newPromise=createPromise(counter,delay)\n    console.log(newPromise)\n    newPromise.then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    delay+=Number(stepValue.value);\n  }\n  counter=0\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve,reject)=>{\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(()=>\n    {\n      if(shouldResolve)\n      {\n        resolve({position,delay})\n      }\n      reject({position,delay})\n    },delay)\n  })\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delayValue","document","querySelector","$ce04d3a99e08e73b$var$stepValue","$ce04d3a99e08e73b$var$amountValue","addEventListener","event","preventDefault","value","$parcel$interopDefault","Notify","failure","Number","delay1","$ce04d3a99e08e73b$var$counter","newPromise","$ce04d3a99e08e73b$var$createPromise","console","log","then","param","position","delay","success","concat","catch","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.3ff1e513.js.map"}